map "http://research.balgrist.ch/fhir2sphn/StructureMap/BundleToLoopSphn" = "BundleToLoopSphn"

conceptmap "cm-administrative-gender" {
  prefix s = "http://hl7.org/fhir/ValueSet/administrative-gender"
  prefix t = "http://snomed.info/id"
  
  s:female == t:248152002
  s:male == t:248153007
  s:other == t:32570681000036106
}

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" alias DiagnosticReport as source

uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LoopSphn" alias LoopSphn as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/DataRelease" alias DataRelease as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/DataProvider" alias DataProvider as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/SourceSystem" alias SourceSystem as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/SubjectPseudoIdentifier" alias SubjectPseudoIdentifier as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/BirthDate" alias BirthDate as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/DeathDate" alias DeathDate as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Death" alias Death as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AdministrativeSex" alias AdministrativeSex as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Content" alias Content as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Code" alias Code as target

imports "http://research.balgrist.ch/fhir2sphn/StructureMap/MetaSourceToSourceSystem"
imports "http://research.balgrist.ch/fhir2sphn/StructureMap/EncounterToAdministrativeCase"
imports "http://research.balgrist.ch/fhir2sphn/StructureMap/ObservationVitalSignToMeasurement"
imports "http://research.balgrist.ch/fhir2sphn/StructureMap/AllergyIntoleranceToAllergy"
imports "http://research.balgrist.ch/fhir2sphn/StructureMap/ConditionToProblemCondition"
imports "http://research.balgrist.ch/fhir2sphn/StructureMap/DiagnosticReportToLabTestEvent"


group fhir2sphn(source bundle : Bundle, target tgt : LoopSphn) {
  // DataRelease
  bundle -> tgt.DataRelease = create('DataRelease') as dataRelease then {
    bundle.id as id -> dataRelease.id = id;
    bundle.meta as meta then {
      meta.lastUpdated as lastUpdated -> dataRelease.creationTime = lastUpdated;
    };
  } "DataRelease";

  bundle -> tgt.content = create('Content') as content then {
    bundle.entry as entry then {
      // Resource.meta.source -> SourceSystem
      // Conditionally create a SourceSytem for each unique meta.source (url without optional '#...' suffix)
      entry.resource as resource where (content.SourceSystem.id.supersetOf($this.meta.source.split('#')[0]).not()) then sourceSystem(resource, content);

      // Patient -> SubjectPseudoIdentifier, DataProvider, Content.AdministrativeSex, Content.BirthDate
      entry.resource as patient where $this.ofType(FHIR.Patient) then patient(patient, tgt, content);

      // Encounter -> Content.AdministrativeCase
      entry.resource as encounter where $this.ofType(FHIR.Encounter) then adminCase(encounter, content);

      // Observation (vital-sign) -> Content.Measurement
      entry.resource as observation where $this.ofType(FHIR.Observation) and $this.category.coding.code = 'vital-signs' then vitalSign(observation, content);
 
      // AllergyIntolerance -> Content.Allergy
      entry.resource as allergyIntolerance where $this.ofType(FHIR.AllergyIntolerance) then allergy(allergyIntolerance, content);

      // DiagnosticReport + corresponding Observations (laboratory) -> Conent.LabTestEvent
      entry.resource as report where $this.ofType(FHIR.DiagnosticReport) then laboratory(bundle, report, content);

      // Condition (problem-list-item) -> Content.ProblemCondition
      entry.resource as condition where $this.ofType(FHIR.Condition) and $this.category.coding.code = 'problem-list-item' then problemCondition(condition, content);
    };
  } "Content";
}

group patient(source patient : Patient, target tgt : LoopSphn, target content: Content) {
  // gender -> Content.AdministrativeSex
  patient.gender as gender -> content.AdministrativeSex = create('AdministrativeSex') as sex then {
    patient.meta as m then refSourceSystem(m, sex);
    gender -> sex.id = uuid(), translate(gender, '#cm-administrative-gender') as cm,
      sex.hasCode as code, code.termid = (%cm.code), code.iri = (%cm.system & '/' & %cm.code) "code";
  };

  // birthDate -> Content.BirthDate
  patient.birthDate as birthDate -> content.BirthDate = create('BirthDate') as bd then {
    patient.meta as m then refSourceSystem(m, bd);
    birthDate -> bd.id = uuid(),
      // TODO: why can't we use yearOf(), monthOf()?
      bd.hasYear = evaluate(birthDate, toString().substring(0, 4)),
      bd.hasMonth = evaluate(birthDate, toString().substring(5, 2)),
      bd.hasDay = evaluate(birthDate, toString().substring(8, 2)) "birthdate";
  };

  // deceased[Boolean|DateTime] -> Content.Death / Content.DeathDate
  patient.deceased as deceased where $this = true or $this is DateTime -> content.Death = create('Death') as death then {
    patient.meta as m then refSourceSystem(m, death);
    deceased -> death.id = uuid() "id";
    // deceasedDateTime -> DeathDate
    deceased where $this is DateTime -> content.DeathDate = create('DeathDate') as deathDate,
      deathDate.id = uuid() as duuid,
      death.hasDate = create('Reference') as ref, ref.reference = duuid,
      deathDate.hasYear = evaluate(deceased, toString().substring(0, 4)),
      deathDate.hasMonth = evaluate(deceased, toString().substring(5, 2)),
      deathDate.hasDay = evaluate(deceased, toString().substring(8, 2)) "deathDate";
  };

  // managingOrganization (contained) -> DataProvider
  patient.contained as organization where $this.ofType(FHIR.Organization)  -> tgt.DataProvider = create('DataProvider') as provider then {
    organization.id as id -> provider.id = id;
    organization -> provider.hasInstitutionCode as code then {
      organization.id as id -> code.id = uuid(), code.hasCodingSystemAndVersion = "UID";
      organization.identifier as identifier -> code.hasIdentifier = (%identifier.value);
      organization.name as name -> code.hasName = name;
    } "hasInstitutionCode";
  };

  // SubjectPseudoIdentifier
  patient -> tgt.SubjectPseudoIdentifier as subject then {
    patient.id as id ->  subject.id = ('Patient/' & %id);
    patient.identifier as identifier -> subject.hasIdentifier = (%identifier.system & '|' & %identifier.value);
  } "SubjectPseudoIdentifier";
}
