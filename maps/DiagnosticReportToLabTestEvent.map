map "http://research.balgrist.ch/fhir2sphn/StructureMap/DiagnosticReportToLabTestEvent" = "DiagnosticReportToLabTestEvent"

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" alias DiagnosticReport as source
uses "http://hl7.org/fhir/StructureDefinition/Observation" alias Observation as source
uses "http://hl7.org/fhir/StructureDefinition/Quantity" alias Quantity as source

uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Content" alias Content as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabTestEvent" alias LabTestEvent as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabTest" alias LabTest as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabResult" alias LabResult as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Quantity" alias Quantity as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/ReferenceRangeOrValue" alias ReferenceRangeOrValue as target

imports "http://research.balgrist.ch/fhir2sphn/StructureMap/Utils"


group laboratory(source bundle : Bundle, source report : DiagnosticReport, target content: Content) <<types>> {
  report -> content.LabTestEvent = create('LabTestEvent') as event then {
    report.meta as m then refSourceSystem(m, event);
    report.id as id -> event.id = ('DiagnosticReport/' & %id);
    report.encounter as encounter -> event.hasAdministrativeCase = encounter;
    report.effectiveDateTime as effectiveDateTime -> event.hasDateTime = effectiveDateTime;

    // result (Observation [laboratory]) -> hasLabTest
    report.result as result -> evaluate(result, resolve()) as observation,
      event.hasLabTest = create('LabTest') as lab then labTest(observation, lab);
  } "event";
}

group labTest(source observation : Observation, target lab: LabTest) <<types>> {
  observation.id as id -> lab.id = ('Observation/' & %id);
  
  // code.coding -> hasCode
  observation.code as code then {
    code.coding as coding where $this.system = 'https://loinc.org' -> lab.hasCode as hasCoding then {
      coding.code as c -> hasCoding.termid = c, hasCoding.iri = append('https://loinc.org/rdf/', c);
    };
  };

  // valueQuantity or valueString -> hasResult
  observation -> lab.hasResult = create('LabResult') as result then {
    observation.id as id -> result.id = ('Observation/' & %id & '-result');

    // valueString -> hasStringValue
    observation.value : string as value -> result.hasStringValue = value "valueString";
    // valueQuantity -> hasQuantity
    observation.value : Quantity as v -> result.hasQuantity as q then quantity(v, q);

    // referenceRange -> hasNumericalReference.hasLowerLimit/hasUpperLimit
    observation.referenceRange as range -> result.hasNumericalReference = create('ReferenceRangeOrValue') as ref, ref.id = uuid(), ref.target_concept = 'https://biomedit.ch/rdf/sphn-schema/sphn#ReferenceRange' then {
      range.low as low -> ref.hasLowerLimit as lowerLimit then quantity(low, lowerLimit);
      range.high as high -> ref.hasUpperLimit as upperLimit then quantity(high, upperLimit);
    };
  } "hasResult";
}

