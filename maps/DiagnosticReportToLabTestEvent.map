map "http://research.balgrist.ch/fhir2sphn/StructureMap/DiagnosticReportToLabTestEvent" = "DiagnosticReportToLabTestEvent"

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" alias DiagnosticReport as source
uses "http://hl7.org/fhir/StructureDefinition/Observation" alias Observation as source
uses "http://hl7.org/fhir/StructureDefinition/Quantity" alias Quantity as source

uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Content" alias Content as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabTestEvent" alias LabTestEvent as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabTest" alias LabTest as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/LabResult" alias LabResult as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Quantity" alias Quantity as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/ReferenceRange" alias ReferenceRange as target


group laboratory(source bundle : Bundle, source report : DiagnosticReport, target content: Content) <<types>> {
    report -> content.LabTestEvent = create('LabTestEvent') as event then {
        report.id as id -> event.id = ('DiagnosticReport/' & %id);
        report.encounter as encounter -> event.hasAdministrativeCase = encounter;
        report.effectiveDateTime as effectiveDateTime -> event.hasDateTime = effectiveDateTime;

        // result (Observation [laboratory]) -> hasLabTest
        report.result as result then {
          // TODO: Unfortunately, 'resolve()' references does not work!
          //    result -> evaluate(result, resolve()) as observation -> event.hasLabTest = create('LabTest') as lab then labTest(observation, lab);
          // Therefore, we have to find the reference by looping over all bundle.entry to find the corresponding Observation
          bundle.entry as entry where $this.resource.ofType(FHIR.Observation) and $this.resource.category.coding.code = 'laboratory' and result.reference = ('Observation/' & $this.resource.id) then {
            entry.resource as observation -> event.hasLabTest = create('LabTest') as lab then labTest(observation, lab);
          };
        };
    } "event";
}

group labTest(source observation : Observation, target lab: LabTest) <<types>> {
  observation.id as id log('ID: ' & %observation.id) -> lab.id = ('Observation/' & %id);
  
  // code.coding -> hasCode
  observation.code as code then {
    code.coding as coding where $this.system = 'https://loinc.org' -> lab.hasCode as hasCoding then {
      coding.code as c -> hasCoding.termid = c, hasCoding.iri = append('https://loinc.org/', c);
    };
  };

  // valueQuantity or valueString -> hasResult
  observation -> lab.hasResult = create('LabResult') as result then {
    observation.id as id -> result.id = ('Observation/' & %id & '-result');

    // valueString -> hasStringValue
    observation.value : string as value -> result.hasStringValue = value "valueString";
    // valueQuantity -> hasQuantity
    observation.value : Quantity as value -> result.hasQuantity as quantity then {
      value.value as v ->  quantity.id = uuid(), quantity.hasValue = v, quantity.hasUnit as unit then unit(value, unit);
    } "valueQuantity";

    // referenceRange -> hasNumericalReference.hasLowerLimit/hasUpperLimit
    observation.referenceRange as range -> result.hasNumericalReference = create('ReferenceRange') as ref, ref.id = uuid() then {
      range.low as low -> ref.hasLowerLimit as lowerLimit then limit(low, lowerLimit);
      range.high as high -> ref.hasUpperLimit as upperLimit then limit(high, upperLimit);
    };
  } "hasResult";
}

group limit(source vq : Quantity, target limit: Quantity) {
  vq.value as v -> limit.id = uuid(), limit.hasValue = v, limit.hasUnit as unit then unit(vq, unit);
}

group unit(source vq : Quantity, target unit: Unit) {
  vq -> unit.id = uuid(), unit.hasCode as code then {
    vq.code as c -> code.termid = c;
    vq.system as s -> code.iri = s;
  } "code";
}
