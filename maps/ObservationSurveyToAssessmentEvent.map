map "http://research.balgrist.ch/fhir2sphn/StructureMap/ObservationSurveyToAssessmentEvent" = "ObservationSurveyToAssessmentEvent"

uses "http://hl7.org/fhir/StructureDefinition/Observation" alias Observation as source
uses "http://hl7.org/fhir/StructureDefinition/Quantity" alias Quantity as source

uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Content" alias Content as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentResult" alias AssessmentResult as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentComponent" alias AssessmentComponent as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Assessment" alias Assessment as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentEvent" alias AssessmentEvent as target

imports "http://research.balgrist.ch/fhir2sphn/StructureMap/Utils"


group resultValueQuantitytoAssessmentResult(source vq: Quantity, target assessment: Assessment){
  // valueQuantity when only valueQuantity is available (not valueCodeableConcept)
  vq -> assessment.hasResult = create('AssessmentResult') as result then {
    vq -> result.id = uuid(), result.hasQuantity as quantity then {
    vq.value as v -> quantity.id = uuid(), quantity.hasValue = v, quantity.hasUnit as unit then unit(vq, unit);
    } "ValueQuantity";
  } "AssessmentResult";
}

group codingToCode(source coding, target trg){
  coding as srcCoding where $this.system = 'http://snomed.info/sct' -> trg.hasCode as trgCode then {
    srcCoding.code as c -> trgCode.termid = c as termid,
    trgCode.iri = append('http://snomed.info/id/', termid);
  }"codingToCode";
}


group assessmentEvent(source observation : Observation, target content : Content) <<types>> {
  observation -> content.AssessmentEvent = create('AssessmentEvent') as assessmentEvent then {
    observation.meta as m then refSourceSystem(m, assessmentEvent);
    observation.id as id -> assessmentEvent.id = ('AssessmentEvent/' & %id);
    observation.effectiveDateTime as t -> assessmentEvent.hasDateTime = t;
    observation.encounter as encounter -> assessmentEvent.hasAdministrativeCase = encounter;

    observation.code as observation_code -> assessmentEvent.hasAssessment = create('Assessment') as assessment,  assessment.id = uuid() then {
      observation_code.coding as coding -> assessment then codingToCode(coding, assessment);

      observation_code.coding as coding then {
        coding.display as d -> assessment.hasName = d;
      };

      // valueCodeableConcept
      observation.valueCodeableConcept as vcc -> assessment.hasResult = create('AssessmentResult') as result then {
        vcc.coding as srcCoding where $this.system = 'http://snomed.info/sct' -> result.id = uuid(), result.hasCode as trgCode then {
          srcCoding.code as c -> trgCode.termid = c as termid,
          trgCode.iri = append('http://snomed.info/id/', termid);
        } "assessmentResult_code";

        // valueQuantity as extension (coding and quantity available)
        vcc.extension as ext where $this.url = "https://www.hl7.org/fhir/R4/observation.html#component/valueQuantity" then {
          ext.valueQuantity as vq -> assessment then resultValueQuantitytoAssessmentResult(vq, assessment);
        };
      } "valueCodeableConcept";

      // valueQuantity
      observation.valueQuantity as vq -> assessment then resultValueQuantitytoAssessmentResult(vq, assessment);

      
      // Components
      observation.component as comp -> assessment.hasComponent = create('AssessmentComponent') as component then {
        // Component code
        comp.code as srcCode then {
          srcCode.coding as srcCoding where $this.system = 'http://snomed.info/sct' -> component.hasCode as trgCode then {
            srcCoding.code as c -> component.id = uuid(), 
            trgCode.termid = c as termid,
            trgCode.iri = append('http://snomed.info/id/', termid);
            srcCoding.display as d -> component.hasName = d;
          };
          // Assessment components without code
          srcCode.coding as srcCoding where $this.system = 'https://www.biomedit.ch/rdf/sphn-schema/sphn#AssessmentComponent' then {
            srcCoding.display as d -> component.hasName = d;
          };
        };

        // Results
        // Component/valueCodeableConcept
        comp.valueCodeableConcept as vcc -> component.hasResult = create('AssessmentResult') as result then {
          vcc.coding as srcCoding where $this.system = 'http://snomed.info/sct' -> result.id = uuid(), result.hasCode as trgCode then {
            srcCoding.code as c -> trgCode.termid = c as termid,
            trgCode.iri = append('http://snomed.info/id/', termid);
          } "compAssessmentResult_code";
        
          // Component/valueQuantity as extension (coding and quantity available)
          vcc.extension as ext where $this.url = "https://www.hl7.org/fhir/R4/observation.html#component/valueQuantity" then {
            ext.valueQuantity as vq -> component then resultValueQuantitytoAssessmentResult(vq, assescomponentsment);
          };
        } "compValueCodeableConcept";
        
 
        // Component/valueQuantity when only valueQuantity is available (not valueCodeableConcept)
        comp.valueQuantity as vq -> component then resultValueQuantitytoAssessmentResult(vq, component);

      } "AssessmentComponent";
    } "Assessment";
  } "AssessmentEvent";
}
