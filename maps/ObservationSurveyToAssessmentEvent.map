map "http://research.balgrist.ch/fhir2sphn/StructureMap/ObservationSurveyToAssessmentEvent" = "ObservationSurveyToAssessmentEvent"

// Source definitions
uses "http://hl7.org/fhir/StructureDefinition/Observation" alias Observation as source
uses "http://hl7.org/fhir/StructureDefinition/Quantity" alias Quantity as source

// Target definitions
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Content" alias Content as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentResult" alias AssessmentResult as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentComponent" alias AssessmentComponent as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/Assessment" alias Assessment as target
uses "http://research.balgrist.ch/fhir2sphn/StructureDefinition/AssessmentEvent" alias AssessmentEvent as target

imports "http://research.balgrist.ch/fhir2sphn/StructureMap/Utils"

// Utils
group resultValueQuantitytoAssessmentResult(source vq: Quantity, target assessment: Assessment){
 vq -> assessment.hasResult = create('AssessmentResult') as result then {
   vq -> result.id = uuid(), result.hasQuantity as quantity then {
     vq.value as v -> quantity.id = uuid(), quantity.hasValue = v, quantity.hasUnit as unit then unit(vq, unit);
   } "ValueQuantity";
 } "AssessmentResult";
}


group codingToCode(source coding, target trg){
 coding as srcCoding where $this.system = 'http://snomed.info/sct' -> trg.hasCode as trgCode then {
   srcCoding.code as c -> trgCode.termid = c as termid,
   trgCode.iri = append('http://snomed.info/id/', termid);
 } "codingToCode";
}
//

// Main mapping Observation -> AssessmentEvent
group assessmentEvent(source observation : Observation, target content : Content) <<types>> {
 observation -> content.AssessmentEvent = create('AssessmentEvent') as assessmentEvent then {
   // Metadata and basic fields
   observation.meta as m then refSourceSystem(m, assessmentEvent);
   observation.id as id -> assessmentEvent.id = ('AssessmentEvent/' & %id);
   observation.effectiveDateTime as t -> assessmentEvent.hasDateTime = t;
   observation.encounter as encounter -> assessmentEvent.hasAdministrativeCase = encounter;

   // observation.code -> Assessment
   observation.code as observation_code -> assessmentEvent.hasAssessment = create('Assessment') as assessment,  assessment.id = uuid() then {
     observation_code.coding as coding -> assessment then codingToCode(coding, assessment);
     observation_code.coding as coding then {
       coding.display as d -> assessment.hasName = d;
     };

     // valueCodeableConcept -> AssessmentResult/hasCode
     observation.valueCodeableConcept as vcc -> assessment.hasResult = create('AssessmentResult') as result, result.id = uuid() then {
       vcc.coding as coding -> result then codingToCode(coding, result);

       // valueCodeableConcept/extension/ValueQuantity  -> Assessment/hasQuantity
       // present if result is available as code and value
       vcc.extension as ext where $this.url = "https://www.hl7.org/fhir/R4/observation.html#component/valueQuantity" then {
         ext.valueQuantity as vq -> assessment then resultValueQuantitytoAssessmentResult(vq, assessment);
       };
     } "valueCodeableConcept";

     // valueQuantity -> AssessmentResult/hasQuantity
     observation.valueQuantity as vq -> assessment then resultValueQuantitytoAssessmentResult(vq, assessment);
 
     // Component -> Assessment/Component
     observation.component as comp -> assessment.hasComponent = create('AssessmentComponent') as component then {
       // coding -> Components/hasCode
       comp.code as srcCode then {
         srcCode.coding as coding -> component then codingToCode(coding, component);
         srcCode.coding as coding then {
           coding.display as d -> component.hasName = d;
         };

         // Handle components without SNOMED code
         srcCode.coding as srcCoding where $this.system = 'https://www.biomedit.ch/rdf/sphn-schema/sphn#AssessmentComponent' then {
           srcCoding.display as d -> component.hasName = d;
         };
       };

       // Component results
       //  valueCodeableConcept
       comp.valueCodeableConcept as vcc -> component.hasResult = create('AssessmentResult') as result, result.id = uuid() then {
         vcc.coding as coding -> result then codingToCode(coding, result);
       
         // valueQuantity extension
         vcc.extension as ext where $this.url = "https://www.hl7.org/fhir/R4/observation.html#component/valueQuantity" then {
           ext.valueQuantity as vq -> component then resultValueQuantitytoAssessmentResult(vq, assescomponentsment);
         };
       } "compValueCodeableConcept";
       
       // Standalone valueQuantity
       comp.valueQuantity as vq -> component then resultValueQuantitytoAssessmentResult(vq, component);

     } "AssessmentComponent";
   } "Assessment";
 } "AssessmentEvent";
}